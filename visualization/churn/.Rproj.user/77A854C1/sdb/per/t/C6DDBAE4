{
    "contents" : "---\ntitle: \"Churn Prediction\"\noutput: \n  flexdashboard::flex_dashboard:\n    orientation: rows\n    #vertical_layout: scroll\n    #logo: \"www/ThinkBig.png\"\n    #theme: default\n    #css: www/style.css\nruntime: shiny\n    \n---\n\n```{r setup, include=FALSE}\nlibrary(shinydashboard)\nlibrary(flexdashboard)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\n```\n\nIntroduction\n=========================================\n\nRow \n-----------------------------------------------------------------------\n\n### {data-width=50%}\n\n**Think Big Team**\n\n- Giacomo Snidero\n- Almir Mutapcic\n- Guillermo Breto Rangel\n\n**Business Problem**\n\n1. A telecommunication company wants to understand the motivations of customers churning and find possible actions to tackle this. \n2. The dataset to leverage contains the customers services usage combined with demographics info.     \n3. Develop a data statistical churn model and visualisation dashboard to drive actionable insights.\n\n### {data-width=50%}\n\n**Analytics Workflow**\n\nIngest Raw Data into Hadoop via Spark, used Spark and Python for statistical analysis and R-Shiny for visualization:\n\n<img src=\"www/analyticsworkflow.png\">\n\nRow \n-----------------------------------------------------------------------\n\n### {data-width=340}\n\n**Our Approach**\n\n- Batch ingest all raw data the into Hadoop Hive Tables, leveraging Spark\n- Join and aggregate datasets\n- Develop data profiling to understand the main dataset \n- Trained statistical models to undestand the churn main drivers and to predict customer churn\n- Use statistical model to predict customers like to churn on unseen data\n\n### {data-width=340}\n\n**Key Benefits and Outcomes**\n\nKey benefits were:\n\n- Indentified the churn patterns and key drivers \n- Developed Statistical model that predicts customer churn with a score around 80%\n\n\nChurn Models\n=====================================\n\n **Models**\n \n The main ML algorithms used to model the data are:\n \n For Classification:\n \n  * Decision tree Model\n  * Logistic Regression Model\n  * Random Forest Model\n\n\n\nChurn Drivers\n=====================================\n\n**Drivers**\n \nThe main drivers of the customer churn are:\n \n* 'Reloads Inactive Days' = Number of days without recharge\n* 'User Lifetime' = Customer aging in months\n* 'Sms Outgoing Inactive Days' = Number of days without outgoing sms message\n* 'Sms Outgoing To Onnet Inactive Days' \n* 'Sms Outgoing To Offnet Inactive Days',\n* 'Sms Outgoing To Abroad Inactive Days' = Number of days without outgoing sms message to other countries\n* 'Gprs Inactive Days' = Number of days without data usage\n* 'Calls Outgoing Inactive Days',\n* 'Calls Outgoing To Offnet Inactive Days',\n* 'Calls Outgoing To Onnet Inactive Days',\n* 'Calls Outgoing To Abroad Inactive Days',\n* 'Calls Outgoing Count',\n* 'Calls Outgoing To Offnet Spendings',\n* 'Sms Incoming Count',\n* 'User Has Outgoing Calls',\n* 'User Has Outgoing Sms',\n* 'User Account Balance Last' = Customer account balance at the end of the period\n* 'Calls Outgoing Duration Max'\n\nChurn Actions\n=====================================\n\n**Actions**\n\n```{r}\ndrivers = c(\"user_account_id\",\n            \"logistic_regression_probability\",\n            \"prediction_logistic_regression\",\n            \"calls_outgoing_duration_max\",\n            \"user_account_balance_last\",\n            \"user_has_outgoing_sms\",\n            \"sms_outgoing_to_abroad_inactive_days\",\n            \"user_lifetime\",\n            \"reloads_inactive_days\"\n            )\n\ndf = churn::predicted_churn\ndf = df[,drivers]\n\nchurned = df %>% \n  dplyr::filter(prediction_logistic_regression == 1) %>% \n  dplyr::arrange(desc(logistic_regression_probability))\n\nloyal = df %>% \n  dplyr::filter(prediction_logistic_regression == 0)\n\nchurn_perc = nrow(churned)/nrow(df)*100\nchurn_rate <- formatC(churn_perc, digits = 1, format = \"f\")\n```\n\nRow \n-----------------------------------------------------------------------\n\n### Predicted Loyal Customers\n\n```{r}\nrenderValueBox({\n  valueBox(value = nrow(loyal), icon = \"fa-users\")\n})\n```\n\n### Churn rate\n\n```{r}\ngauge(churn_rate, min = 0, max = 100, symbol = '%', gaugeSectors(\n  success = c(0, 10), warning = c(10, 20), danger = c(20, 100)\n))\n```\n\n### Predicted churn customers\n\n```{r}\nrenderValueBox({\n  valueBox(value = nrow(churned), icon = \"fa-users\", color = \"warning\")\n})\n```\n\nRow {data-height=50}\n-----------------------------------------------------------------------\n\n<h5><b>\nChoose a customer to analyze his/her churn drivers and take appropriate business action.\n</b></h5>\n\nRow \n-----------------------------------------------------------------------\n\n\n### Drivers analysis {data-width=700}\n\n```{r}\n# normalize\nfields = colnames(loyal)[4:ncol(loyal)]\nfor (field in fields) {\n  median_v = median(loyal[[field]])\n  iqr_v = IQR(loyal[[field]])\n  loyal[[field]] = (loyal[[field]] - median_v) / iqr_v\n  churned[[field]] = (churned[[field]] - median_v) / iqr_v\n}\n\n# gather\nchurned_clean = churned %>% tidyr::gather(driver, value, 4:ncol(churned))\nloyal_clean = loyal %>% tidyr::gather(driver, value, 4:ncol(loyal))\n\n# Reactive that returns the whole dataset if there is no brush\nselectedData <- reactive({\n  clean = churned_clean %>% filter(user_account_id == input$customer_id)\n})\n\nrenderPlot({\n  theme_set(theme_gray(base_size = 18))\n  \n  ggplot(selectedData(), aes(driver, value)) + \n    geom_point(colour = \"red\", size = 5, alpha = 0.5) + \n    geom_boxplot(data=loyal_clean, mapping=aes(driver, value)) +\n    coord_flip(ylim = c(-3, 30))\n})\n```\n\n### Predicted churn customers {data-width=340}\n\n```{r}\ndp = churned[, 1]\nselectInput('customer_id', 'Account ID', dp, multiple=TRUE, selectize=FALSE, selected = 1190190, size=15)\n\n#renderTable({\n#dp = churned[1:200, 1:2]\n#colnames(dp) = c(\"Account ID\", \"Churn Probability\")\n#dp\n#})\n```\n",
    "created" : 1474893261134.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2292891947",
    "id" : "C6DDBAE4",
    "lastKnownWriteTime" : 1474895696,
    "path" : "~/ThinkBig/visualization/churn/inst/churnApp/churn_app.rmd",
    "project_path" : "inst/churnApp/churn_app.rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}